steps:
# 1️⃣ Create new instance template with timestamp in name
- name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  args:
    - -c
    - |
      TEMPLATE_NAME="ipv4-v6-template-$(date +%Y%m%d%H%M%S)"
      echo "Creating new template: $TEMPLATE_NAME"
      gcloud compute instance-templates create $TEMPLATE_NAME \
        --machine-type=e2-micro \
        --image-family=debian-12 \
        --image-project=debian-cloud \
        --subnet=ipv4-v6-subnet \
        --region=asia-south1 \
        --stack-type=IPV4_IPV6 \
        --network-tier=PREMIUM \
        --tags=allow-http,allow-https,allow-ssh,ipv4-v6 \
        --metadata=startup-script="#!/bin/bash
        apt-get update -y && apt-get install nginx -y
        systemctl enable nginx && systemctl start nginx
        echo 'Hi all! This is the NEW version deployed at $(date)' > /var/www/html/index.nginx-debian.html"
      echo $TEMPLATE_NAME > template_name.txt

# 2️⃣ Update MIG to use the new template
- name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  args:
    - -c
    - |
      TEMPLATE_NAME=$(cat template_name.txt)
      echo "Updating MIG to use template: $TEMPLATE_NAME"
      gcloud compute instance-groups managed set-instance-template ipv4-v6-mig \
        --region=asia-south1 \
        --template=$TEMPLATE_NAME

# 3️⃣ Start rolling update (replace VMs one by one)
- name: gcr.io/cloud-builders/gcloud
  args:
    - compute
    - instance-groups
    - managed
    - rolling-action
    - start-update
    - ipv4-v6-mig
    - --region=asia-south1
    - --type=proactive
    - --max-unavailable=1

options:
  logging: CLOUD_LOGGING_ONLY
